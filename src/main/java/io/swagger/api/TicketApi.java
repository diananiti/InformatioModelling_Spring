/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Ticket;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-05T09:10:50.989Z")

@Api(value = "ticket", description = "the ticket API")
public interface TicketApi {

    @ApiOperation(value = "Add a new ticket", nickname = "addTicket", notes = "", tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/ticket",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addTicket(@ApiParam(value = "Add a new ticket to database" ,required=true )  @Valid @RequestBody Ticket body);


    @ApiOperation(value = "Deletes a ticket", nickname = "deleteTicket", notes = "", tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Pet not found") })
    @RequestMapping(value = "/ticket/{ticketId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTicket(@ApiParam(value = "Ticket id to delete",required=true) @PathVariable("ticketId") Long ticketId);


    @ApiOperation(value = "Finds ticket by status", nickname = "findTicketsByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Ticket.class, responseContainer = "List", tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Ticket.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/ticket/findByStatus",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Ticket>> findTicketsByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold, canceled") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find ticket by ID", nickname = "getTicketById", notes = "Returns a single ticket", response = Ticket.class, tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Ticket.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Ticket not found") })
    @RequestMapping(value = "/ticket/{ticketId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Ticket> getTicketById(@ApiParam(value = "ID of ticket to return",required=true) @PathVariable("ticketId") Long ticketId);


    @ApiOperation(value = "Adds a ticket in the store with form data", nickname = "updateTicketWithForm", notes = "", tags={ "ticket", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/ticket/{ticketId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateTicketWithForm(@ApiParam(value = "ID of ticket that needs to be updated",required=true) @PathVariable("ticketId") Long ticketId,@ApiParam(value = "Adds status of the ticket") @RequestParam(value="status", required=false)  String status);

}
